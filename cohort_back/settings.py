"""
Django settings for cohort_back project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import os
import environ


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = environ.Env()
environ.Env.read_env()

SERVER_VERSION = env("SERVER_VERSION")
BACK_URL = env("BACK_URL")
FRONT_URL = env("FRONT_URL")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(env("DEBUG")) == 1
print(f"DEBUG: {DEBUG}")


CORS_ORIGIN_ALLOW_ALL = DEBUG
CORS_ORIGIN_WHITELIST = [
    f"https://{FRONT_URL}",
    "http://localhost:49033",
    f"https://{BACK_URL}",
]

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0', BACK_URL]

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',

    'django_filters',
    'safedelete',

    'rest_framework',
    'rest_framework_swagger',
    'drf_yasg',

    'corsheaders',

    'cohort.apps.CohortConfig',

    'explorations',

    'voting',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'cohort.AuthMiddleware.CustomJwtSessionMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'cohort.backends.AuthBackend',
]

ROOT_URLCONF = 'cohort_back.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cohort_back.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env("DB_NAME"),
        'USER': env("DB_USER"),
        'PASSWORD': env("DB_PASSWORD"),
        'HOST': env("DB_HOST"),
        'PORT': env("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


AUTH_USER_MODEL = 'cohort.User'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        'cohort.permissions.AllowOptionsAuthentication',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'cohort.AuthMiddleware.CustomAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'PAGE_SIZE': 100,
}

JWT_SERVER_URL = env("JWT_SERVER_URL")
JWT_SIGNING_KEY = env("JWT_SIGNING_KEY")
JWT_ALGORITHM = env("JWT_ALGORITHM")
JWT_APP_HEADER = "X-User-App"
JWT_APP_NAME = env("JWT_APP_NAME")
JWT_SESSION_COOKIE = "access"
JWT_REFRESH_COOKIE = "refresh"
JWT_SERVER_ACCESS_KEY = "access"
JWT_SERVER_REFRESH_KEY = "refresh"

SWAGGER_SETTINGS = {
    "LOGOUT_URL": "/accounts/logout/",
}

APPEND_SLASH = False

# Celery
CELERY_BROKER_URL = env("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND")
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TASK_ALWAYS_EAGER = False

CELERY_BEAT_SCHEDULE = {
    # 'task-update-cohorts': {
    #     'task': 'cohort_back.celery.import_i2b2',
    #     'schedule': 5
    # },
    # 'task-update-gitlab-issues': {
    #     'task': 'cohort_back.celery.update_gitlab_issues',
    #     'schedule': 10
    # },
    #     'get_pending_jobs_status': {
    #     'task': 'cohort_back.celery.get_pending_jobs_status',
    #     'schedule': 5
    # }
}


PG_OMOP_URL = env("PG_OMOP_URL")
PG_OMOP_DBNAME = env("PG_OMOP_DBNAME")
PG_OMOP_SCHEMA = env("PG_OMOP_SCHEMA")
PG_OMOP_USER = env("PG_OMOP_USER")
PG_OMOP_PASS = env("PG_OMOP_PASS")

VOTING_GITLAB = {
    'enable': True,
    'api_url': env("VOTING_GITLAB_API_URL"),
    'project_id': env("VOTING_GITLAB_PROJECT_ID"),
    'project_name': env("VOTING_GITLAB_PROJECT_NAME"),
    'private_token': env("VOTING_GITLAB_PRIVATE_TOKEN"),
    'authorized_labels': ['To Do', 'Doing', 'Feature request', 'Bug request'],
}
VOTING_ATTACHMENT_MAX_SIZE = int(env("VOTING_ATTACHMENT_MAX_SIZE"))
VOTING_POST_LABELS = env("VOTING_AUTHORIZED_LABELS").split(",")
